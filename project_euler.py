# -*- coding: utf-8 -*-
"""
Created on Wed May 14 10:42:39 2014

@author: CONTJ073
"""

# 1. Find the sum of all the multiples of 3 or 5 below 1000.
print sum([i for i in range(1, 1000) if i % 3 == 0 or i % 5 == 0])



# 2. By considering the terms in the Fibonacci sequence whose values do not
# exceed four million, find the sum of the even-valued terms.
fibonacci = [1, 1]
while max(fibonacci) < 4000000:
    fibonacci.append(fibonacci[-1] + fibonacci[-2])
print sum([f for f in fibonacci if f % 2 == 0])



# 3. What is the largest prime factor of the number 600851475143?
# Solution modified from http://bit.ly/1nJtQXc
n = 600851475143
d = 2
while d * d < n:
    while n % d == 0:
        print n % d == 0
        n /= d
    d += 1
print n



# 4. Find the largest palindrome made from the product of two 3-digit numbers.
n_range = xrange(999, 99, -1)
palindromes = []
for i in n_range:
    for j in n_range:
        s = str(i * j)
        if s == s[::-1]:
            palindromes.append(int(s))
print max(palindromes)



# 5. What is the smallest positive number that is evenly divisible by all of
# the numbers from 1 to 20?
n = 20
small_positive = n
while ~all([small_positive % i == 0 for i in xrange(2, n + 1)]):
    small_positive += n
print small_positive



# 6. Find the difference between the sum of the squares of the first one
# hundred natural numbers and the square of the sum.
n = xrange(1, 101)
print abs(sum([i ** 2 for i in n]) - sum(n) ** 2)



# 7. What is the 10001st prime number?
def is_prime(n):
    if n == 2:
        return True
    elif n < 2 or n % 2 == 0:
        return False
    for x in xrange(3, int(n ** 0.5) + 1, 2):
        if n % x == 0:
            return False
    return True
count_prime = 0
n = 2
while True:
    if is_prime(n):
        count_prime += 1
    if count_prime == 10001:
        break
    n += 1
print n



# 8. Find the greatest product of 5 consecutive digits in the 1000-digit number.
def list_product(x):
    return reduce(lambda a, b: a * b, x)
n = ('731671765313306249192251196744265747423553491949349698352031277450632623'
'95783180169848018694788518438586156078911294949545950173795833195285320880551'
'11254069874715852386305071569329096329522744304355766896648950445244523161731'
'85640309871112172238311362229893423380308135336276614282806444486645238749303'
'58907296290491560440772390713810515859307960866701724271218839987979087922749'
'21901699720888093776657273330010533678812202354218097512545405947522435258490'
'77116705560136048395864467063244157221553975369781797784617406495514929086256'
'93219784686224828397224137565705605749026140797296865241453510047482166370484'
'40319989000889524345065854122758866688116427171479924442928230863465674813919'
'12316282458617866458359124566529476545682848912883142607690042242190226710556'
'26321111109370544217506941658960408071984038509624554443629812309878799272442'
'84909188845801561660979191338754992005240636899125607176060588611646710940507'
'75410022569831552000559357297257163626956188267042825248360082325753042075296'
'3450')
max_prod = 0
for i in xrange(len(n) - 5):
    this_prod = list_product([int(j) for j in list(n[i:i + 5])])
    max_prod = max(max_prod, this_prod)
print max_prod



# 9. There exists exactly one Pythagorean triplet for which a + b + c = 1000.
# Find the product abc.
def triplet(n):
    for a in xrange(1, n + 1):
        for b in xrange(a, n + 1):
            c = n - a - b
            if a ** 2 + b ** 2 == c ** 2:
                return a * b * c
print triplet(1000)



# 10. Find the sum of all the primes below two million.
prime_sum = 0
for n in xrange(2, 2000000):
    if is_prime(n):
        prime_sum += n
print prime_sum



# 11. What is the greatest product of four adjacent numbers in the same
# direction (up, down, left, right, or diagonally) in the 20Ã—20 grid?
nums = ('08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08\n\
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00\n\
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65\n\
52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91\n\
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80\n\
24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50\n\
32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70\n\
67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21\n\
24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72\n\
21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95\n\
78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92\n\
16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57\n\
86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58\n\
19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40\n\
04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66\n\
88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69\n\
04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36\n\
20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16\n\
20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54\n\
01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48')
grid = []
for line in nums.split('\n'):
    grid.append([int(i) for i in line.split(' ')])
iterator = xrange(20)
max_prod = 0
for i in iterator:
    for j in iterator:
        right_ok = j + 3 <= 19
        down_ok = i + 3 <= 19
        if right_ok:
            right = list_product(grid[i][j:j + 4])
        if down_ok:
            down = list_product([grid[i + k][j] for k in xrange(4)])
        if right_ok and down_ok:
            diag_right = list_product([grid[i + k][j + k] for k in xrange(4)])
        if j - 3 >= 0 and down_ok:
            diag_left = list_product([grid[i + k][j - k] for k in xrange(4)])
        max_prod = max(max_prod, right, down, diag_right, diag_left)
print max_prod



# 12. What is the value of the first triangle number to have over 500 divisors?
from math import sqrt
n = 1
tri_num = 0
div_less_than_500 = True
while div_less_than_500:
    tri_num += n
    n_div = 0
    for i in range(1, int(sqrt(tri_num)) + 1):
        if tri_num % i == 0:
            n_div += 1
            if i < sqrt(tri_num):
                n_div += 1
    if n_div > 500:
        print tri_num
        div_less_than_500 = False
    n += 1



# 13. Work out the first 10 digits of the sum of the following 100 50-digit
# numbers.
nums = ('37107287533902102798797998220837590246510135740250\n\
46376937677490009712648124896970078050417018260538\n\
74324986199524741059474233309513058123726617309629\n\
91942213363574161572522430563301811072406154908250\n\
23067588207539346171171980310421047513778063246676\n\
89261670696623633820136378418383684178734361726757\n\
28112879812849979408065481931592621691275889832738\n\
44274228917432520321923589422876796487670272189318\n\
47451445736001306439091167216856844588711603153276\n\
70386486105843025439939619828917593665686757934951\n\
62176457141856560629502157223196586755079324193331\n\
64906352462741904929101432445813822663347944758178\n\
92575867718337217661963751590579239728245598838407\n\
58203565325359399008402633568948830189458628227828\n\
80181199384826282014278194139940567587151170094390\n\
35398664372827112653829987240784473053190104293586\n\
86515506006295864861532075273371959191420517255829\n\
71693888707715466499115593487603532921714970056938\n\
54370070576826684624621495650076471787294438377604\n\
53282654108756828443191190634694037855217779295145\n\
36123272525000296071075082563815656710885258350721\n\
45876576172410976447339110607218265236877223636045\n\
17423706905851860660448207621209813287860733969412\n\
81142660418086830619328460811191061556940512689692\n\
51934325451728388641918047049293215058642563049483\n\
62467221648435076201727918039944693004732956340691\n\
15732444386908125794514089057706229429197107928209\n\
55037687525678773091862540744969844508330393682126\n\
18336384825330154686196124348767681297534375946515\n\
80386287592878490201521685554828717201219257766954\n\
78182833757993103614740356856449095527097864797581\n\
16726320100436897842553539920931837441497806860984\n\
48403098129077791799088218795327364475675590848030\n\
87086987551392711854517078544161852424320693150332\n\
59959406895756536782107074926966537676326235447210\n\
69793950679652694742597709739166693763042633987085\n\
41052684708299085211399427365734116182760315001271\n\
65378607361501080857009149939512557028198746004375\n\
35829035317434717326932123578154982629742552737307\n\
94953759765105305946966067683156574377167401875275\n\
88902802571733229619176668713819931811048770190271\n\
25267680276078003013678680992525463401061632866526\n\
36270218540497705585629946580636237993140746255962\n\
24074486908231174977792365466257246923322810917141\n\
91430288197103288597806669760892938638285025333403\n\
34413065578016127815921815005561868836468420090470\n\
23053081172816430487623791969842487255036638784583\n\
11487696932154902810424020138335124462181441773470\n\
63783299490636259666498587618221225225512486764533\n\
67720186971698544312419572409913959008952310058822\n\
95548255300263520781532296796249481641953868218774\n\
76085327132285723110424803456124867697064507995236\n\
37774242535411291684276865538926205024910326572967\n\
23701913275725675285653248258265463092207058596522\n\
29798860272258331913126375147341994889534765745501\n\
18495701454879288984856827726077713721403798879715\n\
38298203783031473527721580348144513491373226651381\n\
34829543829199918180278916522431027392251122869539\n\
40957953066405232632538044100059654939159879593635\n\
29746152185502371307642255121183693803580388584903\n\
41698116222072977186158236678424689157993532961922\n\
62467957194401269043877107275048102390895523597457\n\
23189706772547915061505504953922979530901129967519\n\
86188088225875314529584099251203829009407770775672\n\
11306739708304724483816533873502340845647058077308\n\
82959174767140363198008187129011875491310547126581\n\
97623331044818386269515456334926366572897563400500\n\
42846280183517070527831839425882145521227251250327\n\
55121603546981200581762165212827652751691296897789\n\
32238195734329339946437501907836945765883352399886\n\
75506164965184775180738168837861091527357929701337\n\
62177842752192623401942399639168044983993173312731\n\
32924185707147349566916674687634660915035914677504\n\
99518671430235219628894890102423325116913619626622\n\
73267460800591547471830798392868535206946944540724\n\
76841822524674417161514036427982273348055556214818\n\
97142617910342598647204516893989422179826088076852\n\
87783646182799346313767754307809363333018982642090\n\
10848802521674670883215120185883543223812876952786\n\
71329612474782464538636993009049310363619763878039\n\
62184073572399794223406235393808339651327408011116\n\
66627891981488087797941876876144230030984490851411\n\
60661826293682836764744779239180335110989069790714\n\
85786944089552990653640447425576083659976645795096\n\
66024396409905389607120198219976047599490197230297\n\
64913982680032973156037120041377903785566085089252\n\
16730939319872750275468906903707539413042652315011\n\
94809377245048795150954100921645863754710598436791\n\
78639167021187492431995700641917969777599028300699\n\
15368713711936614952811305876380278410754449733078\n\
40789923115535562561142322423255033685442488917353\n\
44889911501440648020369068063960672322193204149535\n\
41503128880339536053299340368006977710650566631954\n\
81234880673210146739058568557934581403627822703280\n\
82616570773948327592232845941706525094512325230608\n\
22918802058777319719839450180888072429661980811197\n\
77158542502016545090413245809786882778948721859617\n\
72107838435069186155435662884062257473692284509516\n\
20849603980134001723930671666823555245252804609722\n\
53503534226472524250874054075591789781264330331690')
nums_sum = 0
for n in nums.split('\n'):
    nums_sum += int(n)
print str(nums_sum)[:10]



# 14. Which starting number, under one million, produces the longest chain?
max_length = 0
max_n = 0
for n in xrange(2, 1000000):
    chain = [n]
    chain_end = chain[-1]
    while chain_end != 1:
        if chain_end % 2 == 0:
            chain.append(chain_end / 2)
        else:
            chain.append((3 * chain_end) + 1)
        chain_end = chain[-1]
    if len(chain) > max_length:
        max_length = len(chain)
        max_n = n
print max_n



# 15. How many such routes are there through a 20Ã—20 grid?
grid_size = 20
paths = 1
for i in xrange(grid_size):
    paths *= (2 * grid_size) - i
    paths /= i + 1
print paths



# 16. What is the sum of the digits of the number 2^1000?
def sum_digits(n):
    return sum([int(d) for d in list(str(n))])
print sum_digits(2 ** 1000)



# 17. If all the numbers from 1 to 1000 inclusive were written out in words,
# how many letters would be used?
dgts = ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']
teens = ['ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen',
         'sixteen', 'seventeen', 'eighteen', 'nineteen']
tens = ['twen', 'thir', 'for', 'fif', 'six', 'seven', 'eigh', 'nine']
tens = [t + 'ty' for t in tens]
to_99 = dgts + teens + tens + [i + j for i in tens for j in dgts]
hundreds = [i + 'hundred' for i in dgts] * 100
nums = to_99 * 10 + hundreds + ['and'] * 99 * 9 + ['thousand'] + [dgts[0]]
print len(''.join(nums))



# 19. How many Sundays fell on the first of the month during the 20th century?
from datetime import date, timedelta
date_list = [date(1901, 1, 1)]
while date_list[-1] != date(2000, 12, 31):
    date_list.append(date_list[-1] + timedelta(days=1))
sun_1st_sum = 0
for d in date_list:
    if d.weekday() == 6 and d.day == 1:
        sun_1st_sum += 1
print sun_1st_sum



# 20. Find the sum of the digits in the number 100!
from math import factorial
print sum_digits(factorial(100))



# 25. What is the first term in the Fibonacci sequence to contain 1000 digits?
fibonacci = [1, 1]
not_1k_digits = True
while not_1k_digits:
    fibonacci.append(fibonacci[-1] + fibonacci[-2])
    if len(list(str(fibonacci[-1]))) == 1000:
        not_1k_digits = False
print len(fibonacci)
